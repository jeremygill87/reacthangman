{"version":3,"sources":["components/images/4.jpg","components/images/5.jpg","components/images/6.jpg","components/images/7.jpg","components/images/8.jpg","components/images/9.jpg","components/images/10.jpg","components/wordlist.js","components/gameboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","wordlist","getWord","Math","floor","random","length","Gameboard","props","handleInput","e","letter","target","value","setState","st","guessed","add","wrong","answer","includes","console","log","state","reset","Set","this","split","map","has","class","key","onClick","disabled","winner","guessedWord","join","gameOver","maxWrong","gameOutcome","renderButtons","className","src","images","alt","Component","defaultProps","Image1","Image2","Image3","Image4","Image5","Image6","Image7","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,qLCAvCC,G,MAAW,CACX,WACA,WACA,YACA,YACA,UACA,iBACA,aACA,aACA,aACA,aACA,eACA,YACA,YACA,aACA,cACA,UACA,YACA,UACA,aACA,eACA,WACA,UACA,gBACA,YACA,aACA,YACA,aACA,eACA,WACA,YACA,iBACA,WACA,UACA,cACA,aAGJ,SAASC,IACL,OAAOD,EAASE,KAAKC,MAAMD,KAAKE,SAAWJ,EAASK,S,wHC3BlDC,E,kDAOF,WAAaC,GAAQ,IAAD,8BAChB,cAAMA,IAUVC,YAAc,SAAAC,GACV,IAAIC,EAASD,EAAEE,OAAOC,MACtB,EAAKC,UAAS,SAAAC,GAAE,MAAK,CACjBC,QAASD,EAAGC,QAAQC,IAAIN,GACxBO,MAAOH,EAAGG,OAASH,EAAGI,OAAOC,SAAST,GAAU,EAAE,OAEtDU,QAAQC,IAAI,EAAKC,QAjBD,EAmCpBC,MAAQ,WACJ,EAAKV,SAAS,CACVI,MAAO,EACPF,QAAS,IAAIS,IAAI,IACjBN,OAAQjB,OArCZ,EAAKqB,MAAQ,CACTL,MAAO,EACPF,QAAS,IAAIS,IAAI,IACjBN,OAAQjB,KAEZmB,QAAQC,IAAI,EAAKC,OAPD,E,0DAqBL,IAAD,OACV,OAAOG,KAAKH,MAAMJ,OAAOQ,MAAM,IAAIC,KAAI,SAAAjB,GAAM,OAAK,EAAKY,MAAMP,QAAQa,IAAIlB,GAAUA,EAAS,W,sCAI/E,IAAD,OACZ,MAAO,6BAA6BgB,MAAM,IAAIC,KAAI,SAAAjB,GAAM,OACpD,4BAAQmB,MAAM,6BAA6BC,IAAKpB,EAAQE,MAAOF,EAAQqB,QAAS,EAAKvB,YAAawB,SAAU,EAAKV,MAAMP,QAAQa,IAAIlB,IAC9HA,Q,+BAgBT,IAAMuB,EAASR,KAAKS,cAAcC,KAAK,MAAQV,KAAKH,MAAMJ,OACpDkB,EAAWX,KAAKH,MAAML,OAASQ,KAAKlB,MAAM8B,SAC5CC,EAAcb,KAAKc,gBAUvB,OARIN,IACAK,EAAc,oBAGdF,IACAE,EAAc,yBAId,yBAAKE,UAAU,uBACX,wBAAIA,UAAU,8BAAd,iBACA,yBAAKA,UAAU,2BACX,yBAAKC,IAAKhB,KAAKlB,MAAMmC,OAAOjB,KAAKH,MAAML,OAAQ0B,IAAI,MAEvD,yBAAKH,UAAU,eACX,8CACA,4BACMJ,EAAgCX,KAAKH,MAAMJ,OAAhCO,KAAKS,eAEtB,2BAAII,GACJ,4BAAQE,UAAU,4BAA4BT,QAASN,KAAKF,OAA5D,e,GA5EIqB,aAAlBtC,EAEKuC,aAAe,CAClBH,OAAQ,CAACI,IAAQC,IAAQC,IAAQC,IAAQC,IAAQC,IAAQC,KACzDf,SAAU,GA+EH/B,QClFA+C,E,uKARX,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,W,GAJUI,aCSEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.10dfc9ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/4.db9097e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.fbff4784.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.c4ea9528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.62a781c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.0f8ca81e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.1b557aa7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.c80394c2.jpg\";","var wordlist = [\r\n    \"DAFFODIL\",\r\n    \"EXISTENT\",\r\n    \"CASUISTRY\",\r\n    \"SOPHISTRY\",\r\n    \"COPIOUS\",\r\n    \"VERISIMILITUDE\",\r\n    \"CHIMERICAL\",\r\n    \"CIRCUITOUS\",\r\n    \"LUGUBRIOUS\",\r\n    \"MELANCHOLY\",\r\n    \"AILUROPHOBIC\",\r\n    \"VITRIOLIC\",\r\n    \"HYPERBOLE\",\r\n    \"SPELUNKING\",\r\n    \"ACQUISITION\",\r\n    \"ABYSMAL\",\r\n    \"ANALAGOUS\",\r\n    \"EMINENT\",\r\n    \"EXACERBATE\",\r\n    \"DEFENESTRATE\",\r\n    \"QUIXOTIC\",\r\n    \"ZEALOUS\",\r\n    \"UNPRECEDENTED\",\r\n    \"MESMERIZE\",\r\n    \"RHETORICAL\",\r\n    \"PENITENCE\",\r\n    \"OBSEQUIOUS\",\r\n    \"OSTENTATIOUS\",\r\n    \"MAVERICK\",\r\n    \"GRANDIOSE\",\r\n    \"PHANTASMAGORIA\",\r\n    \"REDOLENT\",\r\n    \"ANOMALY\",\r\n    \"CONTINGENCY\",\r\n    \"PASTICHE\"\r\n]\r\n\r\nfunction getWord() {\r\n    return wordlist[Math.floor(Math.random() * wordlist.length)]\r\n}\r\n\r\nexport { getWord }","import React, { Component } from 'react';\r\nimport './gameboard.css';\r\nimport { getWord } from './wordlist';\r\n\r\nimport Image1 from \"./images/4.jpg\";\r\nimport Image2 from \"./images/5.jpg\";\r\nimport Image3 from \"./images/6.jpg\";\r\nimport Image4 from \"./images/7.jpg\";\r\nimport Image5 from \"./images/8.jpg\";\r\nimport Image6 from \"./images/9.jpg\";\r\nimport Image7 from \"./images/10.jpg\";\r\n\r\nclass Gameboard extends Component {\r\n    //Establish static properties that are never altered\r\n    static defaultProps = {\r\n        images: [Image1, Image2, Image3, Image4, Image5, Image6, Image7],\r\n        maxWrong: 6\r\n    }\r\n    //use constructor to initialize component's state\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            wrong: 0,\r\n            guessed: new Set([]),\r\n            answer: getWord()\r\n        }\r\n        console.log(this.state)\r\n    }\r\n\r\n    //reads the value of the letter that corresponds with the button clicks\r\n    handleInput = e => {\r\n        let letter = e.target.value;\r\n        this.setState(st => ({\r\n            guessed: st.guessed.add(letter),\r\n            wrong: st.wrong + (st.answer.includes(letter) ? 0:1 )\r\n        }));\r\n        console.log(this.state)\r\n    }\r\n\r\n    //takes answer property, splits the characters, then assigns _'s for all characters within the answer that have not been guessed yet\r\n    guessedWord() {\r\n        return this.state.answer.split(\"\").map(letter => (this.state.guessed.has(letter) ? letter : \" _ \"));\r\n    }\r\n\r\n    //renders letter buttons and assigns letter values to each button.  \"Disabled\" is a property designed to prevent duplicate letter guesses\r\n    renderButtons() {\r\n        return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\").map(letter => (\r\n            <button class=\"btn btn-lg btn-primary m-2\" key={letter} value={letter} onClick={this.handleInput} disabled={this.state.guessed.has(letter)}>\r\n                {letter}\r\n            </button>\r\n        ));\r\n    }\r\n\r\n    //Reset button for when you win or lose or just want to give up\r\n    reset = () => {\r\n        this.setState({\r\n            wrong: 0,\r\n            guessed: new Set([]),\r\n            answer: getWord()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        //gameOutcome generates the buttons upon new game, and changes string properties based on whether or not the player wins\r\n        const winner = this.guessedWord().join(\"\") === this.state.answer;\r\n        const gameOver = this.state.wrong >= this.props.maxWrong;\r\n        let gameOutcome = this.renderButtons();\r\n\r\n        if (winner) {\r\n            gameOutcome = \"A winner is you.\"\r\n        }\r\n\r\n        if (gameOver) {\r\n            gameOutcome = \"Loser.  Just give up.\"\r\n        }\r\n\r\n        return (\r\n            <div className=\"gameboard container\">\r\n                <h1 className=\"hangman-banner text-center\">HangMan React</h1>\r\n                <div className=\"hangman-box text-center\">\r\n                    <img src={this.props.images[this.state.wrong]} alt=\"\" />\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <h4>Guess the word</h4>\r\n                    <h2>\r\n                        {!gameOver ? this.guessedWord() : this.state.answer}\r\n                    </h2>\r\n                    <p>{gameOutcome}</p>\r\n                    <button className=\"reset-button btn btn-info\" onClick={this.reset}>Reset</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Gameboard;","import React, { Component } from 'react';\nimport Gameboard from './components/gameboard';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Gameboard/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}